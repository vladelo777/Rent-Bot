import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –¢—É—Ç –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω –æ—Ç Telegram-–±–æ—Ç–∞
API_TOKEN = ''

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏
APARTMENTS_FILE = "apartments.json"


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º JSON, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Ç—É–¥–∞
def load_apartments():
    if not os.path.exists(APARTMENTS_FILE):
        return []
    with open(APARTMENTS_FILE, "r", encoding="utf-8") as file:
        return json.load(file)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º JSON, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É–¥–∞
def save_apartments(apartments):
    with open(APARTMENTS_FILE, "w", encoding="utf-8") as file:
        json.dump(apartments, file, ensure_ascii=False, indent=4)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
apartments = load_apartments()


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RentStates(StatesGroup):
    waiting_for_rooms = State()
    waiting_for_metro = State()
    waiting_for_description = State()
    waiting_for_rent_rooms = State()
    waiting_for_rent_metro = State()


# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")],
        [KeyboardButton(text="üí∞ –°–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")],
        [KeyboardButton(text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")]
    ],
    resize_keyboard=True
)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def start(message: types.Message):
    print(f'‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.')
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –∏–ª–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ú–æ—Å–∫–≤–µ.\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –í–ª–∞–¥–∏—Å–ª–∞–≤ –õ–∞—Ö—Ç–∏–æ–Ω–æ–≤, @vladelo.",
        reply_markup=start_kb
    )


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "üí∞ –°–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É"
@dp.message(lambda message: message.text == "üí∞ –°–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")
async def rent_out(message: types.Message, state: FSMContext):
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):")
    await state.set_state(RentStates.waiting_for_rooms)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):"
@dp.message(RentStates.waiting_for_rooms)
async def enter_rooms(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(rooms=int(message.text))
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:")
    await state.set_state(RentStates.waiting_for_metro)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ "üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:"
@dp.message(RentStates.waiting_for_metro)
async def enter_metro(message: types.Message, state: FSMContext):
    await state.update_data(metro=message.text)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    await state.set_state(RentStates.waiting_for_description)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:"
@dp.message(RentStates.waiting_for_description)
async def enter_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_apartment = {
        'rooms': data['rooms'],
        'metro': data['metro'],
        'description': message.text,
        'owner': message.from_user.username,
    }
    apartments.append(new_apartment)
    save_apartments(apartments)
    print(f'‚úÖÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –¥–æ–±–∞–≤–∏–ª –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–¥–∞—á–∏.')
    await message.answer("üéâ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "üîë –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É"
@dp.message(lambda message: message.text == "üîë –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")
async def rent(message: types.Message, state: FSMContext):
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:")
    await state.set_state(RentStates.waiting_for_rent_rooms)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:"
@dp.message(RentStates.waiting_for_rent_rooms)
async def search_rooms(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(rooms=int(message.text))
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:")
    await state.set_state(RentStates.waiting_for_rent_metro)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ "üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:"
@dp.message(RentStates.waiting_for_rent_metro)
async def search_metro(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rooms = data['rooms']
    metro = message.text.lower()
    apartments = load_apartments()
    found_apartments = [apt for apt in apartments if apt['rooms'] == rooms and metro in apt['metro'].lower()]
    print(f'‚úÖÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏—â–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –∞—Ä–µ–Ω–¥—ã.')

    if found_apartments:
        result = "üî• –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:\n\n"
        for apt in found_apartments:
            result += f"üõå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {apt['rooms']}\n"
            result += f"üöá –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {apt['metro']}\n"
            result += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {apt['description']}\n"
            result += f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: @{apt['owner']}\n\n"
        await message.answer(result)
    else:
        await message.answer("üòî –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await state.clear()


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"
@dp.message(lambda message: message.text == "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
async def view_all(message: types.Message):
    apartments = load_apartments()
    print(f'‚úÖÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Å–º–æ—Ç—Ä–∏—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.')

    if apartments:
        result = "üî• –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:\n\n"
        for apt in apartments:
            result += f"üõå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {apt['rooms']}\n"
            result += f"üöá –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {apt['metro']}\n"
            result += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {apt['description']}\n"
            result += f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: @{apt['owner']}\n\n"
        await message.answer(result)
    else:
        await message.answer('üòî –ù–µ—Ç —Å–¥–∞—é—â–∏—Ö—Å—è –∫–≤–∞—Ä—Ç–∏—Ä.')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    print(f'üöÄ Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    asyncio.run(main())
